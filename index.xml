<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pranav</title>
    <link>http://pruhnuhv.github.io/</link>
    <description>Recent content on pranav</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Aug 2021 02:02:26 +0530</lastBuildDate><atom:link href="http://pruhnuhv.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GSoC.</title>
      <link>http://pruhnuhv.github.io/gsoc/gsoc-final-report/</link>
      <pubDate>Mon, 16 Aug 2021 02:02:26 +0530</pubDate>
      
      <guid>http://pruhnuhv.github.io/gsoc/gsoc-final-report/</guid>
      <description>GSoC Conclusion : So, GSoC&#39;21 officially kicked off on the 7th of June, and the coding period, and consequently the GSoC comes to an end today, on the 16th of August. This blog aims to be a report on all that has happened since.
The Raspberry Pi BSP  Before :
  The RTEMS 5 branch boots up on a couple of models. SMP doesn&amp;rsquo;t work at all.
  RTEMS 6 branch doesn&amp;rsquo;t boot up on any model.</description>
    </item>
    
    <item>
      <title>Testing - SPI</title>
      <link>http://pruhnuhv.github.io/gsoc/testing-spi/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:10 +0530</pubDate>
      
      <guid>http://pruhnuhv.github.io/gsoc/testing-spi/</guid>
      <description>RTEMS libi2c : The RTEMS libi2c API also supports SPI devices, the SPI on the raspberry Pi BSP is based on this libi2c API instead of the separate /dev/spi API that is used in a few other RTEMS BSPs.
The Driver : In our driver, like we did for the I2C driver, we first define the read and write functions to interact with the sensor. According to the datasheet, writing is done by lowering the CSB and sending control bytes and register data pairs.</description>
    </item>
    
    <item>
      <title>Testing - I2C</title>
      <link>http://pruhnuhv.github.io/gsoc/testing-i2c/</link>
      <pubDate>Sun, 25 Jul 2021 00:02:20 +0530</pubDate>
      
      <guid>http://pruhnuhv.github.io/gsoc/testing-i2c/</guid>
      <description>RTEMS libi2c : RTEMS provides a standard API to I2C or SPI based drivers. So my driver for the BMP280 as well as the corresponding test is based upon this libi2c API.
 BMP280 : BMP280 is a widely available Temperature and Pressure sensor, typically used with Arduinos and Raspberry Pi&amp;rsquo;s, hence there is a lot of support and documentation for the same.
The Driver : In our driver, we initially define the read and write functions to interact with the sensor.</description>
    </item>
    
    <item>
      <title>Testing - GPIO II</title>
      <link>http://pruhnuhv.github.io/gsoc/gpio-2/</link>
      <pubDate>Sun, 11 Jul 2021 02:02:26 +0530</pubDate>
      
      <guid>http://pruhnuhv.github.io/gsoc/gpio-2/</guid>
      <description>RECAP:  The if&amp;hellip;else blocks were just turning out to be a tedious, and not so optimal way of going about the task at hand. My main task right now was to write a patch for the second bank of GPIO pins, in such a way that I do not add a whole lot of extra complexity to the existing GPIO code of the RPi BSP(s).
 The PATCH:  When the pin was on the second bank, the effective pin number reflecting would be it&amp;rsquo;s overhead from 32.</description>
    </item>
    
    <item>
      <title>Testing - GPIO</title>
      <link>http://pruhnuhv.github.io/gsoc/testing-gpio/</link>
      <pubDate>Sat, 03 Jul 2021 02:02:26 +0530</pubDate>
      
      <guid>http://pruhnuhv.github.io/gsoc/testing-gpio/</guid>
      <description>RKI : I thought of writing RTEMS test applications from scratch, but thankfully, Alan suggested using his RTEMS Kernel Image (RKi) project repository for the same. It is a really handy basic framework that provides an option to create custom commands, pass parameters, get user inputs and is very useful for this kind of testing.
The Test : Testing the polled I/O was pretty straightforward using a bunch of LEDs and switches.</description>
    </item>
    
    <item>
      <title>Waf And Autoconf</title>
      <link>http://pruhnuhv.github.io/gsoc/waf-and-autoconf/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:50 +0530</pubDate>
      
      <guid>http://pruhnuhv.github.io/gsoc/waf-and-autoconf/</guid>
      <description>Autoconf:  The Autoconf Build for the master branch was failing because of the absence of the rtems_bsdnet.h file and I had to disable networking (&amp;ndash;disable-networking) while building the BSP, after which I was able to build the master Branch BSP successfully.
Well, funny enough, using our temporary patch from my previous post, I was able to get the BSP to boot and bring the console up when built with Autoconf.</description>
    </item>
    
    <item>
      <title>BSP Startup issues</title>
      <link>http://pruhnuhv.github.io/gsoc/bsp-startup-issues/</link>
      <pubDate>Tue, 15 Jun 2021 02:02:26 +0530</pubDate>
      
      <guid>http://pruhnuhv.github.io/gsoc/bsp-startup-issues/</guid>
      <description>Some context, to the blog post ahead:  It&amp;rsquo;s been a week into the coding period of the GSoC&#39;21 at RTEMS, more than a week since I actually started working, and a few meets and emails have been exchanged with the mentors and the ever-so-helpful RTEMS community.
Initial Hiccups: I started off trying to build the RTEMS 6 (henceforth referred to as Master) Raspberry Pi BSPs. There&amp;rsquo;s two(rather, three) ways to build the BSPs.</description>
    </item>
    
    <item>
      <title>Google summer of code, 2021, Introduction</title>
      <link>http://pruhnuhv.github.io/gsoc/gsoc-introduction/</link>
      <pubDate>Sat, 29 May 2021 00:20:47 +0530</pubDate>
      
      <guid>http://pruhnuhv.github.io/gsoc/gsoc-introduction/</guid>
      <description> GSoC at RTEMS  Improving The Rapsberry Pi BSP:  RTEMS Project already supports the Raspberry Pi 1, My project over the summer aims to add support for the Raspberry Pi Zero, Pi Zero W and the Raspberry Pi 3. This would include the basic Board Support Package (BSP), including but not limited to Interrupts, Clock Tick, UART, I2C, SPI, etc. Mentors: Chris Johns, Alan Cudmore, Kinsey Moore. </description>
    </item>
    
  </channel>
</rss>
